<?xml version="1.0"?>
<launch>

    <arg name="id_robot_left" default="left_summit"/>
    <arg name="id_robot_right" default="right_summit"/>
    <arg name="prefix_left" default="$(arg id_robot_left)_"/>
    <arg name="prefix_right" default="$(arg id_robot_right)_"/>
    <arg name="pad_model" default="$(optenv ROBOT_PAD_MODEL ps4)"/>
    <arg name="x_init_pose" default="0"/>
    <arg name="y_init_pose" default="0"/>
    <arg name="z_init_pose" default="0"/>
    <arg name="xacro_robot_package" default="summit_xl_gazebo"/>
    <arg name="xacro_robot" default="ur_base.urdf.xacro"/>
    <arg name="xacro_robot_path" default="$(eval find(xacro_robot_package) + '/xacro/' + xacro_robot)"/>
    <arg name="right_controller_path" default="$(eval find(xacro_robot_package) + '/config/' + 'right_controllers.yaml')"/>
    <arg name="left_controller_path" default="$(eval find(xacro_robot_package) + '/config/' + 'left_controllers.yaml')"/>
    <arg name="launch_amcl_and_mapserver" default="false"/>
    <arg name="launch_gmapping" default="false"/>
    <arg name="launch_move_base" default="false"/>
    <arg name="launch_robot_ekf_localization" default="false"/>
    <arg name="robot_ekf_localization_mode" default="odom"/>
    <arg name="map_file" default="empty/empty.yaml"/>
    <arg name="movebase_local_planner" default="teb"/>
    <!-- odom, complete (including gps)-->
    <arg name="omni_drive" default="true"/>
    <arg name="ros_planar_move_plugin" default="true"/>
    <arg name="ros_planar_move_plugin_force_based" default="false"/>
    <arg name="launch_pad" default="false"/>
    <arg name="use_gpu_for_simulation" default="false"/><!-- use_gpu_for_simulation -->
    <arg name="has_pantilt_camera" default="false"/>
    <!-- arm robot -->
    <arg name="launch_arm" default="false"/>
    <arg name="arm_manufacturer" default="trossen"/>
	<arg name="arm_model" default="vx300s"/>
    <arg name="launch_moveit" default="false"/>
    <arg name="arm_prefix" default="$(arg prefix_left)"/>

    <arg name="gazebo_world" default="$(find summit_xl_gazebo)/worlds/summit_xl_office.world"/>
    <arg name="launch_rviz" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="gazebo_gui" default="true"/>

    <!-- only for advanced simulation -->
    <arg name="launch_advanced_simulation" default="false"/> <!-- one flag activates all -->
    <arg name="launch_base_hw_sim" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_battery_estimator" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_perception" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_navigation" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc_rostful" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_hmi" default="$(arg launch_advanced_simulation)"/>
    <arg name="rlc_rostful_host" default="localhost"/>
    <arg name="rlc_rostful_port" default="8080"/>
    <arg name="merge_lasers" default="$(arg launch_advanced_simulation)"/>
    <arg name="merge_laser_topics" default="front_laser/scan rear_laser/scan"/>

    <!-- GPS default position of Robotnik at Fuente del Jarro-->
	<arg name="gps_latitude" default="39.5080331"/>
	<arg name="gps_longitude" default="-0.4619816"/>

    <arg name="fake_map_transform" default="true"/>

    <arg name="joint_limit_params" default="$(find ur_description)/config/ur5e/joint_limits.yaml"/>
    <arg name="kinematics_params" default="$(find ur_description)/config/ur5e/default_kinematics.yaml"/>
    <arg name="physical_params" default="$(find ur_description)/config/ur5e/physical_parameters.yaml"/>
    <arg name="visual_params" default="$(find ur_description)/config/ur5e/visual_parameters.yaml"/>
    <!--common parameters -->
    <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
    <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller"/>
    <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
    <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />

    

    <node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="world_left_base" args="-0.66 0 0 0 0 0 world $(arg id_robot_left)_odom 100" />
    <node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="world_right_base" args="0.66 0 0 0 0 0 world $(arg id_robot_right)_odom 100" />

    <group ns="$(arg id_robot_left)">

        <arg name="robot_model" value="left_ur_" />

        <param name="robot_description" command="$(find xacro)/xacro '$(arg xacro_robot_path)'
                prefix:=$(arg prefix_left)
                ros_planar_move_plugin:=$(arg ros_planar_move_plugin)
                ros_planar_move_plugin_force_based:=$(arg ros_planar_move_plugin_force_based)
                omni_wheels:=$(arg omni_drive)
                gpu:=$(arg use_gpu_for_simulation)
                gps_latitude:='$(arg gps_latitude)'
                gps_longitude:='$(arg gps_longitude)'
                robot_model:='$(arg robot_model)'
                joint_limit_params:='$(arg joint_limit_params)'
                kinematics_params:='$(arg kinematics_params)'
                physical_params:='$(arg physical_params)'
                visual_params:='$(arg visual_params)'
                transmission_hw_interface:='$(arg transmission_hw_interface)'
                safety_limits:='$(arg safety_limits)'
                safety_pos_margin:='$(arg safety_pos_margin)'
                safety_k_position:='$(arg safety_k_position)'
                rpy_ur_to_base:='0 0 -1.57'
                --inorder"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        </node>

        <node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-x -0.66
                -y $(arg y_init_pose)
                -z $(arg z_init_pose)
                -urdf
                -param robot_description
                -model $(arg id_robot_left)" />

        <include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
            <arg name="id_robot" value="$(arg id_robot_left)"/>
            <arg name="prefix" value="$(arg prefix_left)"/>
            <arg name="sim" value="true"/>

            <arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
            <arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

            <arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
            <arg name="sim_arm_control" value="$(arg launch_arm)"/>
            <arg name="launch_pantilt_camera_controller" value="$(arg has_pantilt_camera)"/>

            <arg name="arm_manufacturer" value="$(arg arm_manufacturer)"/>
            <arg name="arm_model" value="$(arg arm_model)"/>
            <arg name="arm_prefix" value="$(arg arm_prefix)"/>
            <arg name="odom_broadcast_tf" unless="$(arg launch_robot_ekf_localization)" value="true"/>
            <arg name="odom_broadcast_tf" if="$(arg launch_robot_ekf_localization)" value="false"/>

        </include>

        <arg name="controllers" default="left_ur_joint_group_pos_controller" doc="Controllers that are activated by default."/>

        <rosparam file="$(arg left_controller_path)" command="load"/>
        <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
            args="$(arg controllers)" output="screen" respawn="false" />


    </group>
    

    <group ns="$(arg id_robot_right)">

        <arg name="robot_model" value="right_ur_" />

        <!-- Load the URDF into the ROS Parameter Server -->
        <param name="robot_description" command="$(find xacro)/xacro '$(arg xacro_robot_path)'
                prefix:=$(arg prefix_right)
                ros_planar_move_plugin:=$(arg ros_planar_move_plugin)
                ros_planar_move_plugin_force_based:=$(arg ros_planar_move_plugin_force_based)
                omni_wheels:=$(arg omni_drive)
                gpu:=$(arg use_gpu_for_simulation)
                gps_latitude:='$(arg gps_latitude)'
                gps_longitude:='$(arg gps_longitude)'
                robot_model:='$(arg robot_model)'
                joint_limit_params:='$(arg joint_limit_params)'
                kinematics_params:='$(arg kinematics_params)'
                physical_params:='$(arg physical_params)'
                visual_params:='$(arg visual_params)'
                transmission_hw_interface:='$(arg transmission_hw_interface)'
                safety_limits:='$(arg safety_limits)'
                safety_pos_margin:='$(arg safety_pos_margin)'
                safety_k_position:='$(arg safety_k_position)'
                rpy_ur_to_base:='0 0 1.57'
                --inorder"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
            <!-- <remap from="/joint_states" to="joint_states" /> -->
        </node>

        <!-- Spawner model into gazebo -->
        <node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-x 0.66
                -y 0
                -z 0
                -urdf
                -param robot_description
                -model $(arg id_robot_right)
             " />

        <include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
            <arg name="id_robot" value="$(arg id_robot_right)"/>
            <arg name="prefix" value="$(arg prefix_right)"/>
            <arg name="sim" value="true"/>

            <arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
            <arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

            <arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
            <arg name="sim_arm_control" value="$(arg launch_arm)"/>
            <arg name="launch_pantilt_camera_controller" value="$(arg has_pantilt_camera)"/>

            <arg name="arm_manufacturer" value="$(arg arm_manufacturer)"/>
            <arg name="arm_model" value="$(arg arm_model)"/>
            <arg name="arm_prefix" value="$(arg prefix_right)"/>
            <arg name="odom_broadcast_tf" unless="$(arg launch_robot_ekf_localization)" value="true"/>
            <arg name="odom_broadcast_tf" if="$(arg launch_robot_ekf_localization)" value="false"/>

        </include>
        <arg name="controllers" default="right_ur_joint_group_pos_controller" doc="Controllers that are activated by default."/>

        <rosparam file="$(arg right_controller_path)" command="load"/>
        <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
            args="$(arg controllers)" output="screen" respawn="false" />
      
    </group>

    
<!-- 
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
		  robotnik_base_control
		  joint_read_state_controller
		  ">
	</node> -->

    <include file="$(find summit_xl_gazebo)/launch/gazebo_rviz.launch">
        <arg name="launch_rviz" value="$(arg launch_rviz)"/>
        <arg name="world" value="$(arg gazebo_world)"/>
        <arg name="debug" value="$(arg debug)"/>
		<arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    </include>

</launch>